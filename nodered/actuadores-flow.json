[{"id":"72da1078.916768","type":"tab","label":"Actuadores","disabled":false,"info":""},{"id":"2f09ab16.783014","type":"link in","z":"72da1078.916768","name":"","links":["25324058.6b9cf8"],"x":15,"y":180,"wires":[["736c24ea.5a4414"]]},{"id":"88bc5e99.814d68","type":"mqtt out","z":"72da1078.916768","name":"mqtt send ","topic":"","qos":"0","retain":"false","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"af2ecbdd.767f08","x":2800,"y":160,"wires":[]},{"id":"736c24ea.5a4414","type":"function","z":"72da1078.916768","name":"Prepara sensors data query","func":"var topicSplitted = msg.topic.split(\"/\");\nvar idTenant = topicSplitted[0];\nvar idResidence = topicSplitted[1];\nvar roomType = topicSplitted[2];\nvar idBedroom = topicSplitted[3];\n\nvar influxLine = \"SELECT lightLevel FROM light where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1 ; select temperature from  temperature  where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;select airQuality from  airQuality  where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;select humidity from  humidity  where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;select presence from  presence where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;SELECT light,window FROM room_status where roomType='#roomType' and idRoom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;SELECT municipio FROM residences where residenceId=#idResidence;\"\ninfluxLine = influxLine.replace(/#idTenant/g,idTenant);\ninfluxLine = influxLine.replace(/#idResidence/g,idResidence);\ninfluxLine = influxLine.replace(/#idRoom/g,idBedroom);\ninfluxLine = influxLine.replace(/#idBedroom/g,idBedroom);\ninfluxLine = influxLine.replace(/#roomType/g,roomType);\nmsg.influxLine = influxLine;\ninfluxLine = encodeURIComponent(influxLine);\n\nvar getUrl = \"http://#influxIp:8086/query?db=#db\";\ngetUrl =  getUrl.replace('#influxIp', env.get(\"INFLUX_IP\"));\ngetUrl =  getUrl.replace('#db', env.get(\"SENSOR_DATABASE_NAME\"));\nmsg.url = getUrl+\"&q=\"+ influxLine;\nmsg.roomType = roomType;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nflow.set('LIGHT', 1)\nflow.set('WINDOW', 2)","finalize":"","libs":[],"x":140,"y":260,"wires":[["9e5350e5.057d68"]],"info":"Prepare a influxDB query to retrieve:\nSensor data \nCurrent Actuator Status"},{"id":"9e5350e5.057d68","type":"http request","z":"72da1078.916768","name":"GET to influx","method":"GET","ret":"txt","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","authType":"","x":310,"y":160,"wires":[["9b47c18d.bcab98","e6791916.cbb06"]]},{"id":"9b47c18d.bcab98","type":"function","z":"72da1078.916768","name":"Prepare Response","func":"\n\n\nmsg.payload = JSON.parse(msg.payload);\nvar results = msg.payload.results;\n// Format sensors info\nvar sensorsInfo = {};\nfor(var i = 0; i <= 4; i++) {\n    if(results[i].series) {\n        sensorsInfo[results[i].series[0].name] = results[i].series[0].values[0][1];\n    }\n}\nvar previousStatus = { 'light': false, 'window': false};\nif(results[5] && results[5].series && results[5].series.length && results[5].series[0]) {\n    previousStatus = { 'light':results[5].series[0].values[0][1],\n    'window': results[5].series[0].values[0][2] };    \n}\n\nvar municipeCode = results[6].series[0].values[0][1];\n\n// Clean useless data\nmsg.responseUrl = undefined;\nmsg.influxLine = undefined;\nmsg.url = undefined;\nmsg.municipeCode = municipeCode;\n\nmsg.roomInfo = {'sensorsInfo':sensorsInfo, 'previousStatus': previousStatus};\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":160,"wires":[["359ffbab.816edc","f4a8bfe6.eacea"]]},{"id":"e6791916.cbb06","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":450,"y":420,"wires":[]},{"id":"359ffbab.816edc","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":750,"y":400,"wires":[]},{"id":"5d17749e.33ff94","type":"function","z":"72da1078.916768","name":"Determinate Actions","func":"\n// Code added here will be run once\n// whenever the node is started.\n\n\nvar actions = {};\nvar statusChange = false;\n\nvar newStatus = {'light': false, 'window': false} ;\nvar prevStatus = msg.payload.previousStatus;\nvar externalTemp = msg.payload.temp;\n\n\n            \nmsg.topic = \"#idTenant/#idResidence/#roomType/#idRoom/actions\";\nmsg.topic = msg.topic.replace('#idResidence',msg.idResidence);\nmsg.topic = msg.topic.replace('#idTenant',msg.idTenant);\nmsg.topic = msg.topic.replace('#idRoom',msg.idBedroom);\nmsg.topic = msg.topic.replace('#roomType',msg.roomType);\n\n\n// Si hay presencia \nif(msg.payload.sensorsInfo.presence) {\n    // Se comprueba el nivel de luz\n    newStatus.light = msg.payload.sensorsInfo.light < 2500;\n\n    // Se comprueba la temperatura interna y externa\n    newStatus.window = msg.payload.sensorsInfo.temperature > 25 && externalTemp < 25;\n    if(!newStatus.window) {\n        // Se comprueba la calidad del aire\n        newStatus.window = msg.payload.sensorsInfo.airQuality > 2500;\n    }\n} \nif ( (newStatus.light !== prevStatus.light) \n    || ( newStatus.window !== prevStatus.window) ) {\n    statusChange = true;\n} \n\nmsg.protobufType = undefined;\nmsg.statusChange = statusChange;\nmsg.payload = newStatus;\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1580,"y":160,"wires":[["dd33edac.04a848","2a85de04.b617c2","da8aef17.c83738"]]},{"id":"dd33edac.04a848","type":"switch","z":"72da1078.916768","name":"","property":"statusChange","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":1870,"y":160,"wires":[["ba920ef1.77a6a8","e5bc701d.a70ab"],["19a7b437.3914ec"]]},{"id":"19a7b437.3914ec","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"Not status change\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":2040,"y":380,"wires":[]},{"id":"ba920ef1.77a6a8","type":"function","z":"72da1078.916768","name":"Prepare Influx Post","func":"const LIGHT = flow.get('LIGHT');\nconst WINDOW = flow.get('WINDOW');\n\nvar influxPostLine = 'room_status idTenant=#idTenant,idResidence=#idResidence,roomType=\"#roomType\",idRoom=#idRoom,light=#light,window=#window';\ninfluxPostLine = influxPostLine.replace('#idTenant',msg.idTenant);\ninfluxPostLine = influxPostLine.replace('#idResidence',msg.idResidence);\ninfluxPostLine = influxPostLine.replace('#idRoom',msg.idBedroom);\ninfluxPostLine = influxPostLine.replace('#roomType',msg.roomType);\ninfluxPostLine = influxPostLine.replace('#light',msg.payload.light);\ninfluxPostLine = influxPostLine.replace('#window',msg.payload.window);\n\nvar postUrl = \"http://#influxIp:8086/write?db=residentAngel\";\nmsg.url =  postUrl.replace('#influxIp', env.get(\"INFLUX_IP\"));\nmsg.payload = influxPostLine;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2050,"y":80,"wires":[["ee93c29c.8302f"]]},{"id":"ee93c29c.8302f","type":"http request","z":"72da1078.916768","name":"POST Influx","method":"POST","ret":"txt","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","authType":"","x":2310,"y":80,"wires":[["e4751c2c.5b50e8"]]},{"id":"e4751c2c.5b50e8","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"statusCode","targetType":"msg","statusVal":"","statusType":"auto","x":2520,"y":20,"wires":[]},{"id":"f4a8bfe6.eacea","type":"function","z":"72da1078.916768","name":"Prepare aemet  query","func":"\n\nvar influxLine = \"SELECT orto,ocaso,temp FROM weather_forecast where municipio=#idMunicipe order by time DESC limit 1\";\ninfluxLine = influxLine.replace(/#idMunicipe/g,msg.municipeCode);\ninfluxLine = encodeURIComponent(influxLine);\n\nvar getUrl = \"http://#influxIp:8086/query?db=aemet\";\ngetUrl =  getUrl.replace('#influxIp', env.get(\"INFLUX_IP\"));\nmsg.url = getUrl+\"&q=\"+ influxLine;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nflow.set('LIGHT', 0)\nflow.set('WINDOW', 1)","finalize":"","libs":[],"x":780,"y":160,"wires":[["b53462c3.113d2"]],"info":"Prepare a influxDB query to retrieve:\nSensor data \nCurrent Actuator Status"},{"id":"b53462c3.113d2","type":"http request","z":"72da1078.916768","name":"GET aemet","method":"GET","ret":"txt","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","authType":"","x":990,"y":160,"wires":[["64730b65.b9457c","e9774972.a40d5"]]},{"id":"64730b65.b9457c","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1190,"y":260,"wires":[]},{"id":"e9774972.a40d5","type":"function","z":"72da1078.916768","name":"Process aemet response","func":"\n\nmsg.payload = JSON.parse(msg.payload);\nvar orto = msg.payload.results[0].series[0].values[0][1];\nvar ocaso = msg.payload.results[0].series[0].values[0][2];\nvar temp = msg.payload.results[0].series[0].values[0][3];\nmsg.payload = msg.roomInfo;\nmsg.roomInfo = undefined;\nmsg.payload.temp = temp;\n\n// Clean useless data\nmsg.responseUrl = undefined;\nmsg.influxLine = undefined;\nmsg.url = undefined;\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nflow.set('LIGHT', 0)\nflow.set('WINDOW', 1)","finalize":"","libs":[],"x":1290,"y":160,"wires":[["5d17749e.33ff94","47d1211.02e8b6"]],"info":"Prepare a influxDB query to retrieve:\nSensor data \nCurrent Actuator Status"},{"id":"47d1211.02e8b6","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1550,"y":260,"wires":[]},{"id":"2a85de04.b617c2","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"statusChange","targetType":"msg","statusVal":"","statusType":"auto","x":1830,"y":40,"wires":[]},{"id":"e5bc701d.a70ab","type":"encode","z":"72da1078.916768","name":"Encode Actuator Message","protofile":"60305973.f62a9","protoType":"ActuatorMessage","x":2280,"y":160,"wires":[["c81a06e6.025ba8","88bc5e99.814d68","2adc3cee.e68b3c"]]},{"id":"c81a06e6.025ba8","type":"decode","z":"72da1078.916768","name":"","protofile":"60305973.f62a9","protoType":"ActuatorMessage","x":2580,"y":460,"wires":[["d4e3c8b7.d1d428"]]},{"id":"d4e3c8b7.d1d428","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":2750,"y":460,"wires":[]},{"id":"da8aef17.c83738","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1770,"y":260,"wires":[]},{"id":"2adc3cee.e68b3c","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"Sended\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":2800,"y":80,"wires":[]},{"id":"af2ecbdd.767f08","type":"mqtt-broker","name":"mqtt-server","broker":"broker","port":"1883","clientid":"","usetls":false,"compatmode":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"60305973.f62a9","type":"protobuf-file","protopath":"/usr/src/node-red/environment.proto","watchFile":true}]