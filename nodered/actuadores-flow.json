[{"id":"72da1078.916768","type":"tab","label":"Actuadores","disabled":false,"info":""},{"id":"2f09ab16.783014","type":"link in","z":"72da1078.916768","name":"","links":["25324058.6b9cf8"],"x":15,"y":180,"wires":[["736c24ea.5a4414"]]},{"id":"88bc5e99.814d68","type":"mqtt out","z":"72da1078.916768","name":"mqtt send ","topic":"","qos":"","retain":"true","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"af2ecbdd.767f08","x":1720,"y":340,"wires":[]},{"id":"c36d1d37.e5806","type":"encode","z":"72da1078.916768","name":"Encode Actuator Message","protofile":"60305973.f62a9","protoType":"ActuatorMessage","x":1480,"y":340,"wires":[["88bc5e99.814d68"]]},{"id":"736c24ea.5a4414","type":"function","z":"72da1078.916768","name":"Prepara sensors data query","func":"var topicSplitted = msg.topic.split(\"/\");\nvar idTenant = topicSplitted[0];\nvar idResidence = topicSplitted[1];\nvar roomType = topicSplitted[2];\nvar idBedroom = topicSplitted[3];\n\nvar influxLine = \"SELECT lightLevel FROM light where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1 ; select temperature from  temperature  where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;select airQuality from  airQuality  where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;select humidity from  humidity  where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;select presence from  presence where idBedroom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;SELECT light,window FROM room_status where roomType='#roomType' and idRoom=#idBedroom and idTenant=#idTenant and idResidence=#idResidence order by time DESC limit 1;\"\ninfluxLine = influxLine.replace(/#idTenant/g,idTenant);\ninfluxLine = influxLine.replace(/#idResidence/g,idResidence);\ninfluxLine = influxLine.replace(/#idRoom/g,idBedroom);\ninfluxLine = influxLine.replace(/#idBedroom/g,idBedroom);\ninfluxLine = influxLine.replace(/#roomType/g,roomType);\nmsg.influxLine = influxLine;\ninfluxLine = encodeURIComponent(influxLine);\n\nvar getUrl = \"http://#influxIp:8086/query?db=#db\";\ngetUrl =  getUrl.replace('#influxIp', env.get(\"INFLUX_IP\"));\ngetUrl =  getUrl.replace('#db', env.get(\"SENSOR_DATABASE_NAME\"));\nmsg.url = getUrl+\"&q=\"+ influxLine;\nmsg.roomType = roomType;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nflow.set('LIGHT', 0)\nflow.set('WINDOW', 1)","finalize":"","libs":[],"x":200,"y":260,"wires":[["9e5350e5.057d68"]],"info":"Prepare a influxDB query to retrieve:\nSensor data \nCurrent Actuator Status"},{"id":"9e5350e5.057d68","type":"http request","z":"72da1078.916768","name":"GET to influx","method":"GET","ret":"txt","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","authType":"","x":410,"y":260,"wires":[["9b47c18d.bcab98","e6791916.cbb06"]]},{"id":"9b47c18d.bcab98","type":"function","z":"72da1078.916768","name":"Prepare Response","func":"const LIGHT = flow.get('LIGHT');\nconst WINDOW = flow.get('WINDOW');\n\n\n\nmsg.payload = JSON.parse(msg.payload);\nvar results = msg.payload.results;\n// Format sensors info\nvar sensorsInfo = {};\nfor(var i = 0; i <= 4; i++) {\n    if(results[i].series) {\n        sensorsInfo[results[i].series[0].name] = results[i].series[0].values[0][1];\n    }\n}\nvar previousStatus = {actuator: [LIGHT,WINDOW], value: [results[5].series[0].values[0][LIGHT], results[5].series[0].values[0][WINDOW]]}\n\n// Clean useless data\nmsg.responseUrl = undefined;\nmsg.influxLine = undefined;\nmsg.url = undefined;\n\nmsg.payload = {'sensorsInfo':sensorsInfo, 'previousStatus': previousStatus};\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":630,"y":260,"wires":[["359ffbab.816edc","5d17749e.33ff94"]]},{"id":"e6791916.cbb06","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":620,"wires":[]},{"id":"359ffbab.816edc","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":810,"y":440,"wires":[]},{"id":"5d17749e.33ff94","type":"function","z":"72da1078.916768","name":"Determinate Actions","func":"const LIGHT = flow.get('LIGHT');\nconst WINDOW = flow.get('WINDOW');\n\n// Code added here will be run once\n// whenever the node is started.\n\n\nvar actions = {};\nvar statusChange = false;\n\nvar newStatus = {actuator: [], value: []}\nvar prevStatus = msg.payload.previousStatus;\nvar externalTemp = 20;\n\n\n            \nmsg.topic = \"#idTenant/#idResidence/#roomType/#idRoom/actions\";\nmsg.topic = msg.topic.replace('#idResidence',msg.idResidence);\nmsg.topic = msg.topic.replace('#idTenant',msg.idTenant);\nmsg.topic = msg.topic.replace('#idRoom',msg.idBedroom);\nmsg.topic = msg.topic.replace('#roomType',msg.roomType);\n\n\n// Si hay presencia \nif(msg.payload.sensorsInfo.presence) {\n    \n    newStatus.actuator[LIGHT] = LIGHT;\n    // Se comprueba el nivel de luz\n    if(msg.payload.sensorsInfo.light < 1500) {\n        newStatus.value[LIGHT] = true;\n    } else {\n        newStatus.value[LIGHT] = false;\n    }\n    \n    // Se comprueba la temperatura interna y externa\n    newStatus.actuator[WINDOW] = WINDOW;\n    if(msg.payload.sensorsInfo.temperature > 25 && externalTemp < 25) {\n        newStatus.value[WINDOW] = true;\n    } \n    // Se comprueba la calidad del aire\n    else if(msg.payload.sensorsInfo.airQuality > 2500) {\n        newStatus.value[WINDOW] = true;\n    } else {\n        newStatus.value[WINDOW] = false;\n    } \n    \n} else {\n    // Si no hay presencia \n    newStatus.actuator.push(LIGHT);\n    newStatus.value.push(false);\n    newStatus.actuator.push(WINDOW);\n    newStatus.value.push(false);\n}\n\nif ( (newStatus.value[LIGHT] !== prevStatus.value[LIGHT]) \n    || ( newStatus.value[WINDOW] !== prevStatus.value[WINDOW]) ) {\n    statusChange = true;\n} \n\nmsg.payload = {'statusChange':statusChange, 'newStatus':newStatus};\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":260,"wires":[["dd33edac.04a848"]]},{"id":"dd33edac.04a848","type":"switch","z":"72da1078.916768","name":"","property":"payload.statusChange","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":1170,"y":260,"wires":[["c36d1d37.e5806","ba920ef1.77a6a8"],["19a7b437.3914ec"]]},{"id":"19a7b437.3914ec","type":"debug","z":"72da1078.916768","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"\"Not status change\"","targetType":"jsonata","statusVal":"","statusType":"auto","x":1200,"y":440,"wires":[]},{"id":"ba920ef1.77a6a8","type":"function","z":"72da1078.916768","name":"Prepare Influx Post","func":"const LIGHT = flow.get('LIGHT');\nconst WINDOW = flow.get('WINDOW');\n\nvar influxPostLine = 'room_status idTenant=#idTenant,idResidence=#idResidence,roomType=\"#roomType\",idRoom=#idRoom,light=#light,window=#window';\ninfluxPostLine = influxPostLine.replace('#idTenant',msg.idTenant);\ninfluxPostLine = influxPostLine.replace('#idResidence',msg.idResidence);\ninfluxPostLine = influxPostLine.replace('#idRoom',msg.idBedroom);\ninfluxPostLine = influxPostLine.replace('#roomType',msg.roomType);\ninfluxPostLine = influxPostLine.replace('#light',msg.payload.newStatus.value[LIGHT]);\ninfluxPostLine = influxPostLine.replace('#window',msg.payload.newStatus.value[WINDOW]);\n\nvar postUrl = \"http://#influxIp:8086/write?db=residentAngel\";\nmsg.url =  postUrl.replace('#influxIp', env.get(\"INFLUX_IP\"));\nmsg.payload = influxPostLine;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1450,"y":160,"wires":[["ee93c29c.8302f"]]},{"id":"ee93c29c.8302f","type":"http request","z":"72da1078.916768","name":"POST Influx","method":"POST","ret":"txt","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","authType":"","x":1710,"y":160,"wires":[["e4751c2c.5b50e8"]]},{"id":"e4751c2c.5b50e8","type":"debug","z":"72da1078.916768","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1890,"y":160,"wires":[]},{"id":"af2ecbdd.767f08","type":"mqtt-broker","name":"mqtt-server","broker":"broker","port":"1883","clientid":"","usetls":false,"compatmode":false,"protocolVersion":4,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"60305973.f62a9","type":"protobuf-file","protopath":"/usr/src/node-red/environment.proto","watchFile":true}]